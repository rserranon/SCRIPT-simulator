export const opcodeDictionary = {
  "OP_0": { type: "constants", isOpcode: true },
  "OP_FALSE": { type: "constants", isOpcode: true },
  "OP_PUSHDATA1": { type: "constants", isOpcode: true },
  "OP_PUSHDATA2": { type: "constants", isOpcode: true },
  "OP_PUSHDATA4": { type: "constants", isOpcode: true },
  "OP_1NEGATE": { type: "constants", isOpcode: true },
  "OP_1": { type: "constants", isOpcode: true },
  "OP_TRUE": { type: "constants", isOpcode: true },
  "OP_2": { type: "constants", isOpcode: true },
  "OP_3": { type: "constants", isOpcode: true },
  "OP_4": { type: "constants", isOpcode: true },
  "OP_5": { type: "constants", isOpcode: true },
  "OP_6": { type: "constants", isOpcode: true },
  "OP_7": { type: "constants", isOpcode: true },
  "OP_8": { type: "constants", isOpcode: true },
  "OP_9": { type: "constants", isOpcode: true },
  "OP_10": { type: "constants", isOpcode: true },
  "OP_11": { type: "constants", isOpcode: true },
  "OP_12": { type: "constants", isOpcode: true },
  "OP_13": { type: "constants", isOpcode: true },
  "OP_14": { type: "constants", isOpcode: true },
  "OP_15": { type: "constants", isOpcode: true },
  "OP_16": { type: "constants", isOpcode: true },

  "OP_NOP": { type: "flow-control", isOpcode: true },
  "OP_IF": { type: "flow-control", isOpcode: true },
  "OP_NOTIF": { type: "flow-control", isOpcode: true },
  "OP_ELSE": { type: "flow-control", isOpcode: true },
  "OP_ENDIF": { type: "flow-control", isOpcode: true },
  "OP_VERIFY": { type: "flow-control", isOpcode: true },
  "OP_RETURN": { type: "flow-control", isOpcode: true },

  "OP_TOALTSTACK": { type: "stack-opcode", isOpcode: true },
  "OP_FROMALTSTACK": { type: "stack-opcode", isOpcode: true },
  "OP_IFDUP": { type: "stack-opcode", isOpcode: true },
  "OP_DEPTH": { type: "stack-opcode", isOpcode: true },
  "OP_DROP": { type: "stack-opcode", isOpcode: true },
  "OP_DUP": { type: "stack-opcode", isOpcode: true },
  "OP_NIP": { type: "stack-opcode", isOpcode: true },
  "OP_OVER": { type: "stack-opcode", isOpcode: true },
  "OP_PICK": { type: "stack-opcode", isOpcode: true },
  "OP_ROLL": { type: "stack-opcode", isOpcode: true },
  "OP_ROT": { type: "stack-opcode", isOpcode: true },
  "OP_SWAP": { type: "stack-opcode", isOpcode: true },
  "OP_TUCK": { type: "stack-opcode", isOpcode: true },
  "OP_2DROP": { type: "stack-opcode", isOpcode: true },
  "OP_2DUP": { type: "stack-opcode", isOpcode: true },
  "OP_3DUP": { type: "stack-opcode", isOpcode: true },
  "OP_2OVER": { type: "stack-opcode", isOpcode: true },
  "OP_2ROT": { type: "stack-opcode", isOpcode: true },
  "OP_2SWAP": { type: "stack-opcode", isOpcode: true },

  "OP_CAT": { type: "splice", isOpcode: true },
  "OP_SUBSTR": { type: "splice", isOpcode: true },
  "OP_LEFT": { type: "splice", isOpcode: true },
  "OP_RIGHT": { type: "splice", isOpcode: true },
  "OP_SIZE": { type: "splice", isOpcode: true },

  "OP_INVERT": { type: "bitwise", isOpcode: true },
  "OP_AND": { type: "bitwise", isOpcode: true },
  "OP_OR": { type: "bitwise", isOpcode: true },
  "OP_XOR": { type: "bitwise", isOpcode: true },
  "OP_EQUAL": { type: "bitwise", isOpcode: true },
  "OP_EQUALVERIFY": { type: "bitwise", isOpcode: true },

  "OP_1ADD": { type: "arithmetic", isOpcode: true },
  "OP_1SUB": { type: "arithmetic", isOpcode: true },
  "OP_2MUL": { type: "arithmetic", isOpcode: true },
  "OP_2DIV": { type: "arithmetic", isOpcode: true },
  "OP_NEGATE": { type: "arithmetic", isOpcode: true },
  "OP_ABS": { type: "arithmetic", isOpcode: true },
  "OP_NOT": { type: "arithmetic", isOpcode: true },
  "OP_0NOTEQUAL": { type: "arithmetic", isOpcode: true },
  "OP_ADD": { type: "arithmetic", isOpcode: true },
  "OP_SUB": { type: "arithmetic", isOpcode: true },
  "OP_MUL": { type: "arithmetic", isOpcode: true },
  "OP_DIV": { type: "arithmetic", isOpcode: true },
  "OP_MOD": { type: "arithmetic", isOpcode: true },
  "OP_LSHIFT": { type: "arithmetic", isOpcode: true },
  "OP_RSHIFT": { type: "arithmetic", isOpcode: true },
  "OP_BOOLAND": { type: "arithmetic", isOpcode: true },
  "OP_BOOLOR": { type: "arithmetic", isOpcode: true },
  "OP_NUMEQUAL": { type: "arithmetic", isOpcode: true },
  "OP_NUMEQUALVERIFY": { type: "arithmetic", isOpcode: true },
  "OP_NUMNOTEQUAL": { type: "arithmetic", isOpcode: true },
  "OP_LESSTHAN": { type: "arithmetic", isOpcode: true },
  "OP_GREATERTHAN": { type: "arithmetic", isOpcode: true },
  "OP_LESSTHANOREQUAL": { type: "arithmetic", isOpcode: true },
  "OP_GREATERTHANOREQUAL": { type: "arithmetic", isOpcode: true },
  "OP_MIN": { type: "arithmetic", isOpcode: true },
  "OP_MAX": { type: "arithmetic", isOpcode: true },
  "OP_WITHIN": { type: "arithmetic", isOpcode: true },

  "OP_RIPEMD160": { type: "crypto", isOpcode: true },
  "OP_SHA1": { type: "crypto", isOpcode: true },
  "OP_SHA256": { type: "crypto", isOpcode: true },
  "OP_HASH160": { type: "crypto", isOpcode: true },
  "OP_HASH256": { type: "crypto", isOpcode: true },
  "OP_CODESEPARATOR": { type: "crypto", isOpcode: true },
  "OP_CHECKSIG": { type: "crypto", isOpcode: true },
  "OP_CHECKSIGVERIFY": { type: "crypto", isOpcode: true },
  "OP_CHECKMULTISIG": { type: "crypto", isOpcode: true },
  "OP_CHECKMULTISIGVERIFY": { type: "crypto", isOpcode: true },
  "OP_CHECKSIGADD": { type: "crypto", isOpcode: true },

  "OP_CHECKLOCKTIMEVERIFY": { type: "locktime", isOpcode: true },
  "OP_CHECKSEQUENCEVERIFY": { type: "locktime", isOpcode: true },

  "pk(A)": { type: "keys", isOpcode: false },
  "pk(B)": { type: "keys", isOpcode: false },
  "pk(C)": { type: "keys", isOpcode: false },
  "pk(D)": { type: "keys", isOpcode: false },
  "pk(E)": { type: "keys", isOpcode: false },
};

export function getOpcodeType(opcode) {
  const entry = opcodeDictionary[opcode];
  return entry ? entry.type : "unknown";
}

export function isOpcode(opcode) {
  const entry = opcodeDictionary[opcode];
  return entry ? entry.isOpcode : false;
}
